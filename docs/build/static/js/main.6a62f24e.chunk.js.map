{"version":3,"sources":["components/PostsContainer.js","components/FormContainer.js","components/JumbotronContainer.js","App.js","reportWebVitals.js","index.js"],"names":["PostsContainer","handleToDate","date","Date","getMinutes","getFullYear","getMonth","getDate","getHours","Col","md","Card","bg","text","className","Body","Subtitle","style","float","this","props","post","name","Text","content","Footer","created_at","React","Component","FormContainer","handleInputChange","item","e","inputs","Object","assign","state","form","target","value","setState","handlePostSubmit","preventDefault","createPost","isModalOpen","handleModalOpen","bind","handleModalClose","modal","Modal","Dialog","id","backdrop","Form","Header","Group","controlId","Label","Control","label","type","onChange","as","rows","Button","variant","onClick","data-toggle","data-target","data-backdrop","Navbar","collapseOnSelect","expand","Brand","href","JumbotronContainer","Jumbotron","fluid","Container","App","axios","then","response","newData","update","posts","$push","data","catch","error","console","log","status","headers","request","message","config","createForm","require","create","baseURL","responseType","get","results","Row","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a62f24e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { BsChatDotsFill } from \"react-icons/bs\"\r\nimport { Card,CardColumns,Container,Row,Col } from 'react-bootstrap';\r\n\r\nclass PostsContainer extends React.Component {\r\n\r\n    handleToDate=(date)=>{\r\n        date = new Date(date);\r\n        if(date.getMinutes() < 10){\r\n            date = date.getFullYear()+\"/\"+(date.getMonth()+1)+\"/\"+date.getDate()+\" \"+date.getHours()+\":0\"+date.getMinutes()\r\n        } else {\r\n            date = date.getFullYear()+\"/\"+(date.getMonth()+1)+\"/\"+date.getDate()+\" \"+date.getHours()+\":\"+date.getMinutes()\r\n        }\r\n        \r\n        return date;\r\n    }\r\n\r\n    render(){\r\n        let iconStyles = { float: \"right\" };\r\n        return(\r\n                    <Col md=\"4\">\r\n                        <Card bg=\"light\" text=\"dark\" className=\"rounded-3 box-shadow\">\r\n                            <Card.Body>\r\n                                <Card.Subtitle className=\"mb-2 text-muted\"><BsChatDotsFill style={iconStyles}  /> name: {this.props.post.name}</Card.Subtitle>\r\n                                <Card.Text>\r\n                                    {this.props.post.content}\r\n                                </Card.Text>\r\n                            </Card.Body>\r\n                            <Card.Footer>\r\n                                <Card.Text>\r\n                                    {this.handleToDate(this.props.post.created_at)}\r\n                                </Card.Text>\r\n                            </Card.Footer>\r\n                        </Card>\r\n                    </Col>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PostsContainer","import { render } from '@testing-library/react';\r\nimport { FiSend } from \"react-icons/fi\"\r\nimport React from 'react';\r\nimport { Navbar,Nav,NavDropdown, Modal, Form, Button } from 'react-bootstrap';\r\n\r\nclass FormContainer extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            isModalOpen:false,\r\n            form: {\r\n                name: \"\",\r\n                content: \"\",\r\n            }\r\n        }\r\n\r\n        this.handleModalOpen = this.handleModalOpen.bind(this);\r\n        this.handleModalClose = this.handleModalClose.bind(this);\r\n    }\r\n\r\n    handleModalOpen(){\r\n        this.setState({isModalOpen: true});\r\n    }\r\n    handleModalClose(){\r\n        this.setState({isModalOpen: false});\r\n    }\r\n    handleInputChange = (item,e)=>{\r\n        const inputs = Object.assign({},this.state.form)\r\n        inputs[item] = e.target.value;\r\n        this.setState({\r\n            form: inputs\r\n        });\r\n    }\r\n    handlePostSubmit = (e)=>{\r\n        e.preventDefault();\r\n        this.props.createPost(this.state.form)\r\n        this.setState({\r\n            form: {\r\n                name:\"\",\r\n                content:\"\",\r\n            },\r\n            isModalOpen: false\r\n        })\r\n\r\n    }\r\n    \r\n\r\n    render() {\r\n        \r\n\r\n        let modal;\r\n        if (this.state.isModalOpen){\r\n            modal = (\r\n                \r\n                <Modal.Dialog id=\"Modal\" backdrop=\"true\">\r\n                    <Form>\r\n                        <Modal.Header>\r\n                            <Form.Group controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>name</Form.Label>\r\n                                <Form.Control label=\"name\" type=\"name\" value={this.state.form[\"name\"]}\r\n                                    onChange = {(e) => this.handleInputChange(\"name\",e)}\r\n                                />\r\n                            </Form.Group>\r\n                        </Modal.Header>\r\n\r\n                        <Modal.Body>\r\n                            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                                <Form.Label>content</Form.Label>\r\n                                <Form.Control as=\"textarea\" rows={3}\r\n                                    label=\"content\" type=\"content\" value={this.state.form[\"content\"]}\r\n                                    onChange={(e) => this.handleInputChange(\"content\",e)}\r\n                                />\r\n                            </Form.Group>\r\n                        </Modal.Body>\r\n\r\n                        <Modal.Footer>\r\n                            <Button variant=\"secondary\" onClick = {this.handleModalClose}>Cancel</Button>\r\n                            <Button variant=\"primary\" type=\"submit\" data-toggle=\"modal\" data-target=\"#sampleModal\" data-backdrop=\"true\"\r\n                                onClick = {(e) => this.handlePostSubmit(e)}>Go!</Button>\r\n                        </Modal.Footer>\r\n                    </Form>\r\n                </Modal.Dialog>\r\n                    \r\n                \r\n            );\r\n        }\r\n        return(\r\n            <>\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">LTWU</Navbar.Brand>\r\n                <Button variant=\"info\" data-toggle=\"modal\" data-backdrop=\"true\" data-target=\"#Modal\" data-backdrop=\"true\" onClick={this.handleModalOpen}>New Post <FiSend /></Button>\r\n                \r\n            </Navbar>\r\n            {modal}\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default FormContainer;","import React from 'react';\r\nimport { Jumbotron,Container } from 'react-bootstrap';\r\n\r\nclass JumbotronContainer extends React.Component {\r\n    render(){\r\n        return(\r\n            <Jumbotron fluid>\r\n                <Container>\r\n                    <h1>L T W U</h1>\r\n                    <p>\r\n                        <br />Let's  Talk  With  Us  in  English.   You  can  click  \"New Post\"  above  and  post  whatever  you  think.<br />\r\n                        This  is  for  every  one  of  you.  Let  us  know  what  you  feeling  now.  Just  take  it  easy...\r\n                    </p>\r\n                </Container>\r\n            </Jumbotron>\r\n        );\r\n    }\r\n}\r\n\r\nexport default JumbotronContainer;","import React from 'react';\nimport './App.css';\nimport axios from 'axios'\nimport PostsContainer from './components/PostsContainer'\nimport FormContainer from './components/FormContainer'\nimport JumbotronContainer from './components/JumbotronContainer'\nimport update from 'react-addons-update';\nimport { Container,Row,CardColumns,Col } from 'react-bootstrap';\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      posts: [],\n      createForm:{\n        name:\"\",\n        content:\"\",\n      }\n      \n    }\n    /*\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handlePostSubmit = this.handlePostSubmit.bind(this);\n    */\n  }\n  \n  get axios() {\n    const axiosBase = require('axios');\n    return axiosBase.create({\n        baseURL: 'https://ltwu-back.herokuapp.com/posts',\n        headers: {\n            'Content-Type': 'application/json;charset=UTF-8',\n            'X-Requested-With': 'XMLHttpRequest'\n        },\n        responseType: 'json'\n    });\n}\n  \n\n  componentDidMount(){\n    this.axios.get('https://ltwu-back.herokuapp.com/posts')\n    .then(results => {\n      this.setState({\n        posts: results.data\n      });\n    })\n    .catch(data => {\n      console.log(data)\n    });\n  }\n\n  componentDidUpdate(){\n    this.axios.get('https://ltwu-back.herokuapp.com/posts')\n    .then(results => {\n      this.setState({\n        posts: results.data\n      });\n    })\n    .catch(data => {\n      console.log(data)\n    });\n  }\n\n  createPost = (form)=>{\n    this.axios.post(\"https://ltwu-back.herokuapp.com/posts\", form)\n    .then((response) => {\n      const newData = update(this.state.posts, {$push:[response.data]})\n      this.setState({posts: newData})\n    })\n    .catch((error) => {\n      if (error.response) {\n        // このリクエストはステータスコードとともに作成されます\n        // 2xx系以外の時にエラーが発生します\n        console.log(error.response.data);\n        console.log(\"data\");\n        console.log(error.response.status);\n        console.log(\"status\");\n        console.log(error.response.headers);\n        console.log(\"headers\");\n      } else if (error.request) {\n        // このリクエストはレスポンスが返ってこない時に作成されます。\n        // `error.request`はXMLHttpRequest のインスタンスです。\n        console.log(error.request);\n        console.log(\"request\");\n      } else {\n        //それ以外で何か以上が起こった時\n        console.log('Error', error.message);\n      }\n        console.log(error.config);\n        console.log(\"config\");\n    });\n  }\n  \n\n  render(){\n    return(\n      <>\n        <FormContainer \n          createPost = {this.createPost}\n        />\n        <JumbotronContainer />\n        \n        <Container>\n          <Row>\n        {this.state.posts.map((post) => {\n          return(\n                  <PostsContainer post={post} key={post.id} /> \n          )\n        })}\n          </Row>\n        </Container>\n          \n        \n        \n        \n      </>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}